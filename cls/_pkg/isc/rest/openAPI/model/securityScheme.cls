/// A representation of the OpenAPI Specification Security Scheme Object (see http://spec.openapis.org/oas/v3.0.3#securitySchemeObject)
Class %pkg.isc.rest.openAPI.model.securityScheme Extends (%pkg.isc.rest.openAPI.model.securitySchemeOrReference, %pkg.isc.rest.openAPI.model.extensibleSuper)
{

/// @OpenAPI: The type of the security scheme. Valid values are "apiKey", "http", "oauth2", "openIdConnect".
Property Type As %EnumString(%JSONFIELDNAME = "type", VALUELIST = "|apiKey|http|oauth2|openIdConnect") [ Required ];

/// @OpenAPI: A short description for security scheme. CommonMark syntax MAY be used for rich text representation.
Property Description As %String(%JSONFIELDNAME = "description", MAXLEN = 2000) [ Required ];

/// @OpenAPI: The name of the header, query or cookie parameter to be used.
Property Name As %String(%JSONFIELDNAME = "name", MAXLEN = 2000);

/// @OpenAPI: The location of the API key. Valid values are "query", "header" or "cookie".
Property In As %EnumString(%JSONFIELDNAME = "in", VALUELIST = "|query|header|cookie");

/// @OpenAPI: The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235. The values used SHOULD be registered in the IANA Authentication Scheme registry.
/// Valid HTTP Authentication Schemes (see https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml)
Property Scheme As %EnumString(%JSONFIELDNAME = "scheme", VALUELIST = "|Basic|Bearer|Digest|HOBA|Mutual|Negotiate|OAuth|SCRAM-SHA-1|SCRAM-SHA-256|vapid");

/// @OpenAPI: A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.
Property BearerFormat As %String(%JSONFIELDNAME = "bearerFormat", MAXLEN = 2000);

/// @OpenAPI: An object containing configuration information for the flow types supported.
Property Flows As %pkg.isc.rest.openAPI.model.oauthFlows(%JSONFIELDNAME = "flows");

/// @OpenAPI: OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL.
Property OpenIDConnectURL As %String(%JSONFIELDNAME = "openIdConnectUrl", MAXLEN = 2000);

/// @Override: Object-specific validation logic within a given OpenAPI Specification (use ..ValidateComponent() for full validation)
Method Validate(fullSpecification As %pkg.isc.rest.openAPI.model.openAPI = "", debug = 0) As %Boolean
{
	Set openIDValid = ..OpenIDConnectURL="" || $Match(..OpenIDConnectURL, ##class(%pkg.isc.rest.openAPI.util).#URLREGEX)
	Do:'openIDValid ..OnFail(fullSpecification, debug, "URL (" _ ..OpenIDConnectURL _ ") Regex mismatch", "OpenIDConnectURL")
	Return openIDValid
}

Storage Default
{
<Data name="Extras">
<Attribute>Extras</Attribute>
<Structure>subnode</Structure>
<Subscript>"%pkg.isc.rest.openAPI.model.securityScheme.Extras"</Subscript>
</Data>
<Data name="SecuritySchemeDefaultData">
<Subscript>"SecurityScheme"</Subscript>
<Value name="1">
<Value>Type</Value>
</Value>
<Value name="2">
<Value>Description</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
<Value name="4">
<Value>In</Value>
</Value>
<Value name="5">
<Value>Scheme</Value>
</Value>
<Value name="6">
<Value>BearerFormat</Value>
</Value>
<Value name="7">
<Value>Flows</Value>
</Value>
<Value name="8">
<Value>OpenIDConnectURL</Value>
</Value>
</Data>
<DefaultData>SecuritySchemeDefaultData</DefaultData>
<Type>%Storage.Persistent</Type>
}

}

